name: Frontend CI/CD
on:
  push:
    branches: [ main, develop, staging ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-deploy.yaml'

jobs:
  build-and-deploy:
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v2

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      run: |
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/dream-vacations-frontend:${{ github.sha }} frontend/
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/dream-vacations-frontend:${{ github.sha }}

    - name: List directory contents
      run: |
        ls -R ./helm

    - name: Rename chart.yaml to Chart.yaml
      run: mv ./helm/dream-vacations/chart.yaml ./helm/dream-vacations/Chart.yaml
    
    - name: Deploy to Minikube
      run: |
        eval $(minikube docker-env)

        if [[ $GITHUB_REF_NAME == 'develop' ]]; then
          NAMESPACE='dev';
        elif [[ $GITHUB_REF_NAME == 'staging' ]]; then
          NAMESPACE='staging';
        elif [[ $GITHUB_REF_NAME == 'main' ]]; then
          NAMESPACE='prod';
        else
          echo "Unknown branch, deployment skipped.";
          exit 1;
        fi

        helm upgrade --install dream-vacations ./helm/dream-vacations \
          --namespace $NAMESPACE \
          --set frontend.image.repository=${{ secrets.DOCKERHUB_USERNAME }}/dream-vacations-frontend \
          --set frontend.image.tag=${{ github.sha }} \
          --set backend.enabled=true \
          --set database.enabled=true

    - name: Verify deployment
      run: |
        eval $(minikube docker-env)

        if [[ $GITHUB_REF_NAME == 'develop' ]]; then
          NAMESPACE='dev';
        elif [[ $GITHUB_REF_NAME == 'staging' ]]; then
          NAMESPACE='staging';
        elif [[ $GITHUB_REF_NAME == 'main' ]]; then
          NAMESPACE='prod';
        else
          echo "Unknown branch, deployment skipped.";
          exit 1;
        fi

        kubectl get deployment -n $NAMESPACE
        kubectl get services -n $NAMESPACE
    
    - name: Cleanup old images
      run: |
        # Remove dangling images
        docker image prune -f